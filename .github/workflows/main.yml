name: CI/CD Workflow

on:
  push:
    branches:
      - main # Trigger only when pushing to the main branch
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Explicitly grant write permissions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Select the appropriate Python version according to your project requirements

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install runtime dependencies
          pip install mypy # Install development tool dependencies
          pip list # Print the installed dependencies to confirm correct installation

      - name: Create docs directory
        run: mkdir -p docs # Create the docs directory

      - name: Run static analysis with mypy
        run: |
          mypy --install-types --non-interactive .
          mypy --ignore-missing-imports . # Check all files in the project root directory

      - name: Generate documentation with pydoc
        run: |
          # Create a virtual environment
          python -m venv pydoc-env
          source pydoc-env/bin/activate
          pip install --upgrade pip # Ensure pip is the latest version
          pip install -r requirements.txt # Reinstall dependencies in the virtual environment
          pip list # Confirm that dependencies are installed correctly
          # Iterate over modules and generate documentation
          for module in *.py; do
            if [[ "$module" != "requirements.txt" && "$module" != "pydoc.yml" && "$module" != "mypy.ini" ]]; then
              pydoc -w "${module%.py}" || echo "Failed to generate docs for $module"
            fi
          done
          ls -la # List the contents of the current directory to check if HTML files are generated

      - name: Move generated HTML files to docs directory
        run: |
          if ls *.html 1> /dev/null 2>&1; then # Check if HTML files are generated
            mv *.html ./docs/ # Move the generated HTML files to the docs directory
          else
            echo "No HTML files generated by pydoc."
          fi

      - name: Check generated documentation files
        run: |
          ls -la ./docs # List the contents of the docs directory

      - name: Ensure docs directory is not empty
        run: |
          if [ ! "$(ls -A ./docs)" ]; then
            echo "Docs directory is empty, creating a placeholder file."
            touch ./docs/index.html
          fi

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs # Specify the directory where the documentation is generated
          force_orphan: false # Do not force the creation of the gh-pages branch
          clean: false # Do not clean existing files on the gh-pages branch
          commit_message: "Auto-deploy documentation"
